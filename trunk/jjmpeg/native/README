
Code Generation
---------------

The generator is defined by the 'native.conf' file, and processed by the perl
script 'genjjmpeg.pl'.

This creates:
 jjmpeg-jni.c: The automatically generated bindings from the description.
  This includes jjmpeg-jni.h which needs to include everything.

 AVAbstract.java: The corresponding abstract base classes for all objects.

jjmpeg-jni.c is in turn included in jjmpeg.c, which defines the hand-rolled
native calls.

The jjdvb binding currently works in a similar way, although uses the
gendvb.pl script and native-dvb.conf file.  It generates jjdvb-jni.c
and DVBAbstract.java.  It's configuration isn't identical to the
one described here.

Compiling
---------

This is still work in progress - there is a sub-directory for each architecture
and the same code is re-compiled for each.  It assumes cross-compilers are
available and in the path for the given platform, and if not they are simply
ignored during the build.

For linux, it should compile for the native-sized architecture, and if the appropriate
development libraries are included for the other size, they should also build.

For example on Fedora AMD-64, installing glibc-devel.i686 and libgcc.i686 should
suffice.

Generator Configuration
-----------------------

Format is one or more of the following:
class <classname>
<fields>
methods
prefix <prefix> <libraryname>
<c prototypes>
<- blank line

<classname> is the name of the C structure and the Java class
which accesses it.

<fields> are a list of fields:
c type,name,flags[,java name[,offset]]

 c type is the basic c type or structure (no 'struct ' though), or
 for enums, the name of the java enum.

 name is the name of the field

 flags is a list of flags
  p - public
  g - need getter
  s - need setter
  i - indexed (array)
  e - enum
  o - object (should be set for any pointer types)
  r - object must be referenced (i.e. is a struct and must be converted to a pointer)

 java name if provided is used instead of the c name - for
 when the c->java name conversion isn't consistent/desirable (e.g. union reference)

 offset is required for enum types, and indicates how far from
 '0' the first enum is.  enum types only support contigous ranges. 

methods then follow, and are indicated by the optional keyword 'methods'.

prefix defines the common prefix of method names to strip from the function
name, and also defines which library the methods are loaded from (for dlopen).
'lib' is prefixed, and '.so' is suffixed the library name.

Plain C prototypes then follow, with the following limitations and alterations:
 - struct types are not allowed, only typedef'd types.
 - optional keywords which must appear in this order
   - `native' indicates no auto-generated binding in the public object
   - `protected' indicates the public object binding is protected
   - `static' indicates package scope, and that the method must not take the ByteBuffer
     object wrapper pointer.
 - only a limited number of types work.  Any struct types must match one of
   the classes defined in the file, or some other java class at compile time.

A blank line is required to terminate a class definition.
